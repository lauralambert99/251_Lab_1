---
title: "Lab 1: Introduction to Quarto Documents"
---

# Introduction to R, RStudio, and Quarto

## The RStudio Interface 

The goal of this lab is to introduce you to R and RStudio, which you’ll be using throughout this course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions. To clarify which is which: `R` is the name of the programming language itself and RStudio is a convenient interface for working with `R`.

As the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer! Before we get to that stage, however, you need to build some basic fluency in R. First, we will explore the fundamental building blocks of R and RStudio: the RStudio interface, reading in data, and basic commands for working with data in `R`.

Go ahead and launch RStudio. You should see a window with three separate 'panes' or panels.

The panel on the lower left is where the action happens. This panel is called the console. Every time you launch RStudio, it will have the same text at the top of the console telling you the version of R that you’re running. Below that information is the prompt, indicated by the > symbol. As its name suggests, this prompt is really a request: a request for a command. Initially, interacting with `R` is all about typing commands and interpreting the output. These commands and their syntax have evolved over decades (literally) and now provide what many users feel is a fairly natural way to access data and organize, describe, and invoke statistical computations.

The panel in the upper right contains your *environment* as well as a history of the commands that you’ve previously entered.  When we begin reading in data and creating variables, you will see the environment window update with these items.

The panel in the lower right contains tabs for browsing the *files* in your project folder, accessing *help* files for `R` functions, installing and managing `R` *packages*, and inspecting visualizations. By default, all data visualizations you make will appear directly below the code you used to create them. If you would rather your plots appear in the *plots* tab, you will need to change your global options.

### R Packages

`R` is an open-source programming language, meaning that users can contribute packages that make our lives easier, and we can use them for free. For this lab, and many others in the future, we will use the following:

  - The **tidyverse** “umbrella” package which houses a suite of many different `R` packages: for data wrangling and data visualization
  - The **openintro** `R` package: for data and custom functions with the OpenIntro resources
  
In the lower right hand corner click on the *Packages* tab. Type the name of each of these packages (tidyverse, openintro) into the search box to see if they have been installed on your machine. If these packages do not appear when you type in their name, install them by copying and pasting or typing the following two lines of code into the console of your RStudio session. Be sure to press enter/return after each line of code.

```{r}
#| eval: FALSE
install.packages("tidyverse")
install.packages("openintro")
```

After pressing enter/return, a stream of text will begin, communicating the process `R` is going through to install the package from the location you selected when you installed R. If you were not prompted to select a server for downloading packages when you installed `R`, RStudio may prompt you to select a server from which to download; any of them will work.

You only need to *install* packages once, but you need to *load* them each time you relaunch RStudio. We load packages with the `library` function. Copy and paste or type the the following two lines in your console to load the tidyverse and openintro packages into your working environment.

```{r}
#| eval: FALSE
library(tidyverse)
library(openintro)
```

We are choosing to use the tidyverse package because it consists of a set of packages necessary for different aspects of working with data, anything from loading data to wrangling data to visualizing data to analyzing data. Additionally, these packages share common philosophies and are designed to work together. You can find more about the packages in the tidyverse at <https://tidyverse.org>.

### Creating a reproducible lab report

We will be using Quarto Documents to create reproducible lab reports.  Quarto is the evolution of R Markdown, and supports more languages, including Python and GraphViz.  For an explanation of why to we might want reproducible lab reports, [this video](https://youtu.be/lNWVQ2oxNho) provides a good explanation.  Note that they are referencing R Markdown rather than Quarto; the reasoning is the same regardless of the approach.

Going forward you should refrain from typing your code directly in the console, as this makes it very difficult to remember and reproduce the output you want to reference. Potentially the most important feature of Quarto documents is that they allow for us to nest our `R` code within a written report. In an Quarto document, `R` code appears in a gray box, which we call “code chunks.” The Quarto document knows that the gray box contains `R` code because it begins with three tick marks (```), followed by two curly braces that contain a lowercase letter r ({r}). 

Instead of typing our `R` code into the console, we encourage you to type any code you produce (final correct answer, or anything you’re just trying out) in the `R` code chunk associated with each problem. You can execute the `R` code you type in these code chunks similar to how you typed code into the console and pressed enter/return. Within the code chunk there are two ways to execute a line of `R` code: (1) place your cursor on the line on code and press `Ctrl-Enter` or `Cmd-Enter` at the same time, or (2) place your cursor on the line and press the “Run” button in the upper right hand corner of the Quarto document. Alternatively, if you wanted to run all of the `R` code in a given code chunk, you can click on the “Play” button in the upper right hand corner of the code chunk (green sideways triangle).

If at any point you need to start over and run all of the code chunks before a specific code chunk, you click on the “Fastforward” button in the upper right hand corner of that code chunk (gray upside down triangle with a bar below). This will run every code chunk that occurred before that code chunk, but will not execute the `R` code included in that code chunk.

Open the file "Lab_1.qmd" and we will get started!  

## Dr. Arbuthnot's Baptism Records



This lab modified from <https://openintrostat.github.io/oilabs-tidy/01_intro_to_r/intro_to_r.html> under a [Creative Commons Attribution-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-sa/4.0/)